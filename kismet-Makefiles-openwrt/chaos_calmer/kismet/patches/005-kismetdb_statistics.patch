--- a/log_tools/kismetdb_statistics.cc
+++ b/log_tools/kismetdb_statistics.cc
@@ -71,15 +71,13 @@ void print_help(char *argv) {
            "the CSV format used by Wigle\n");
     printf("Usage: %s [OPTION]\n", argv);
     printf(" -i, --in [filename]          Input kismetdb file\n"
-           " -s, --skip-clean             Don't clean (sql vacuum) input database\n"
-           " -j, --json                   Dump stats as a JSON dictionary");
+           " -s, --skip-clean             Don't clean (sql vacuum) input database\n");
 }
 
 int main(int argc, char *argv[]) {
     static struct option longopt[] = {
         { "in", required_argument, 0, 'i' },
         { "skip-clean", no_argument, 0, 's' },
-        { "json", no_argument, 0, 'j' },
         { "help", no_argument, 0, 'h' },
         { 0, 0, 0, 0 }
     };
@@ -90,8 +88,6 @@ int main(int argc, char *argv[]) {
 
     std::string in_fname;
     bool skipclean = false;
-    bool outputjson = false;
-    Json::Value root;
 
     int sql_r = 0;
     char *sql_errmsg = NULL;
@@ -101,7 +97,7 @@ int main(int argc, char *argv[]) {
 
     while (1) {
         int r = getopt_long(argc, argv, 
-                            "-hi:sj", longopt, &option_idx);
+                            "-hi:s", longopt, &option_idx);
         if (r < 0) break;
 
         if (r == 'h') {
@@ -111,8 +107,6 @@ int main(int argc, char *argv[]) {
             in_fname = std::string(optarg);
         } else if (r == 's') {
             skipclean = true;
-        } else if (r == 'j') {
-            outputjson = true;
         }
     }
 
@@ -140,7 +134,7 @@ int main(int argc, char *argv[]) {
     }
 
     if (!skipclean) {
-        fmt::print(stderr, "* Cleaning database '{}'...\n", in_fname);
+        fmt::print("* Preparing input database '{}'...\n", in_fname);
 
         sql_r = sqlite3_exec(db, "VACUUM;", NULL, NULL, &sql_errmsg);
 
@@ -155,224 +149,72 @@ int main(int argc, char *argv[]) {
 
     using namespace kissqlite3;
 
-    if (outputjson)
-        root["file"] = in_fname;
-
     try {
         // Get the version
+        int db_version = 0;
         auto version_query = _SELECT(db, "KISMET", {"db_version"});
-        auto version_ret = version_query.run();
-        auto db_version = sqlite3_column_as<int>(*version_ret, 0);
-
-        if (outputjson) {
-            root["kismetdb_version"] = db_version;
-        } else {
-            fmt::print("  KismetDB version: {}\n", db_version);
-            fmt::print("\n");
+        auto version_ret = version_query.begin();
+        if (version_ret == version_query.end()) {
+            fmt::print(stderr, "ERROR:  Unable to fetch database version.\n");
+            sqlite3_close(db);
+            exit(1);
         }
+        db_version = sqlite3_column_as<int>(*version_ret, 0);
+
+        fmt::print("* KismetDB version: {}\n", in_fname, db_version);
+        fmt::print("\n");
 
         // Get the total counts
+        unsigned long n_total_packets_db = 0L;
+        unsigned long n_packets_with_loc = 0L;
         auto npackets_q = _SELECT(db, "packets", 
                 {"count(*), sum(case when (lat != 0 and lon != 0) then 1 else 0 end)"});
-        auto npackets_ret = npackets_q.run();
-        auto n_total_packets_db = sqlite3_column_as<unsigned long>(*npackets_ret, 0);
-        auto n_packets_with_loc = sqlite3_column_as<unsigned long>(*npackets_ret, 1);
+        auto npackets_ret = npackets_q.begin();
+        if (npackets_ret == npackets_q.end()) {
+            fmt::print(stderr, "ERROR:  Unable to fetch packet count.\n");
+            sqlite3_close(db);
+            exit(1);
+        }
+        n_total_packets_db = sqlite3_column_as<unsigned long>(*npackets_ret, 0);
+        n_packets_with_loc = sqlite3_column_as<unsigned long>(*npackets_ret, 1);
 
+        unsigned long n_total_data_db = 0L;
+        unsigned long n_data_with_loc = 0L;
         auto ndata_q = _SELECT(db, "data",
                 {"count(*), sum(case when(lat != 0 and lon != 0) then 1 else 0 end)"});
-        auto ndata_ret = ndata_q.run();
-        auto n_total_data_db = sqlite3_column_as<unsigned long>(*ndata_ret, 0);
-        auto n_data_with_loc = sqlite3_column_as<unsigned long>(*ndata_ret, 1);
-
-        if (outputjson) {
-            root["packets"] = (uint64_t) n_total_packets_db;
-            root["data_packets"] = (uint64_t) n_total_data_db;
-        } else {
-            fmt::print("  Packets: {}\n", n_total_packets_db);
-            fmt::print("  Non-packet data: {}\n", n_total_data_db);
-            fmt::print("\n");
-        }
-       
-        auto ndevices_q = _SELECT(db, "devices", {"count(*)", "min(first_time)", "max(last_time)"});
-        auto ndevices_ret = ndevices_q.run();
-        auto n_total_devices = sqlite3_column_as<unsigned long>(*ndevices_ret, 0);
-        auto min_time = sqlite3_column_as<time_t>(*ndevices_ret, 1);
-        auto max_time = sqlite3_column_as<time_t>(*ndevices_ret, 2);
-
-        auto min_tm = *std::localtime(&min_time);
-        auto max_tm = *std::localtime(&max_time);
-
-        if (outputjson) {
-            root["devices"] = (uint64_t) n_total_devices;
-            root["device_min_time"] = (uint64_t) min_time;
-            root["device_max_time"] = (uint64_t) max_time;
-        } else {
-            fmt::print("  Devices: {}\n", n_total_devices);
-            fmt::print("  Devices seen between: {} ({}) to {} ({})\n",
-                    std::put_time(&min_tm, "%Y-%m-%d %H:%M:%S"), min_time,
-                    std::put_time(&max_tm, "%Y-%m-%d %H:%M:%S"), max_time);
-        }
-
-        auto n_sources_q = _SELECT(db, "datasources",
-                {"count(*)"});
-        auto n_sources_q_ret = n_sources_q.run();
-
-        if (!outputjson)
-            fmt::print("  {} datasources\n", sqlite3_column_as<unsigned int>(*n_sources_q_ret, 0));
-        
-        auto sources_q = _SELECT(db, "datasources", 
-                {"uuid", "typestring", "definition", "name", "interface", "json"});
-        auto sources_q_ret = sources_q.begin();
-        if (sources_q_ret == sources_q.end()) {
-            fmt::print(stderr, "ERROR:  Unable to fetch datasource count.\n");
+        auto ndata_ret = ndata_q.begin();
+        if (ndata_ret == ndata_q.end()) {
+            fmt::print(stderr, "ERROR: Unable to fetch data count.\n");
             sqlite3_close(db);
             exit(1);
         }
+        n_total_data_db = sqlite3_column_as<unsigned long>(*ndata_ret, 0);
+        n_data_with_loc = sqlite3_column_as<unsigned long>(*ndata_ret, 1);
 
-        Json::Value ds_vec;
-
-        for (auto i = sources_q.begin(); i != sources_q.end(); ++i) {
-            Json::Value ds_root;
-
-            if (outputjson) {
-                ds_root["uuid"] = sqlite3_column_as<std::string>(*i, 0);
-                ds_root["type"] = sqlite3_column_as<std::string>(*i, 1);
-                ds_root["definition"] = sqlite3_column_as<std::string>(*i, 2);
-                ds_root["name"] = sqlite3_column_as<std::string>(*i, 3);
-                ds_root["interface"] = sqlite3_column_as<std::string>(*i, 4);
-            } else {
-                fmt::print("    {:<16} {:<16} {} {}\n",
-                        sqlite3_column_as<std::string>(*i, 3),
-                        sqlite3_column_as<std::string>(*i, 4),
-                        sqlite3_column_as<std::string>(*i, 0),
-                        sqlite3_column_as<std::string>(*i, 1));
-            }
-
-            Json::Value json;
-            std::stringstream ss(sqlite3_column_as<std::string>(*i, 5));
-
-            ss >> json;
-
-            // Pull some data out of the JSON records
-            if (outputjson) {
-                ds_root["hardware"] = json["kismet.datasource.hardware"];
-                ds_root["packets"] = json["kismet.datasource.num_packets"];
-            } else {
-                fmt::print("      Hardware: {}\n", json["kismet.datasource.hardware"].asString());
-                fmt::print("      Packets: {}\n", json["kismet.datasource.num_packets"].asDouble());
-            }
-
-            if (json["kismet.datasource.hopping"].asInt()) {
-                if (outputjson) {
-                    ds_root["hop_rate"] = json["kismet.datasource.hop_rate"];
-                } else {
-                    auto rate = json["kismet.datasource.hop_rate"].asDouble();
-                    if (rate >= 1) {
-                        fmt::print("      Hop rate: {:f}/second\n", rate);
-                    } else if (rate / 60.0f < 60) {
-                        fmt::print("      Hop rate: {:f}/minute\n", rate / 60.0f);
-                    } else {
-                        fmt::print("      Hop rate: {:f} seconds\n", rate / 60.0f);
-                    }
-                }
-
-                if (outputjson) {
-                    ds_root["hop_channels"] = json["kismet.datasource.hop_channels"];
-                } else {
-                    std::stringstream chan_ss;
-                    bool comma = false;
-                    for (auto c : json["kismet.datasource.hop_channels"]) {
-                        if (comma)
-                            chan_ss << ", ";
-
-                        comma = true;
-
-                        chan_ss << c.asString();
-                    }
-
-                    if (chan_ss.str().length()) {
-                        fmt::print("      Hop channels: {}\n", chan_ss.str());
-                    }
-                }
-            } else {
-                auto chan = json["kismet.datasource.channel"].asString();
-                if (chan.length()) {
-                    if (outputjson) {
-                        ds_root["channel"] = chan;
-                    } else {
-                        fmt::print("      Channel: {}", chan);
-                    }
-                }
-            }
-
-            ds_vec.append(ds_root);
-        }
-
-        if (outputjson) {
-            root["datasources"] = ds_vec;
-        } else {
-            fmt::print("\n");
-        }
-
-        auto range_q = _SELECT(db, "devices",
-                {"min(min_lat)", "min(min_lon)", "max(max_lat)", "max(max_lon)"},
-                _WHERE("min_lat", NEQ, 0, 
-                    AND, 
-                    "min_lon", NEQ, 0, 
-                    AND,
-                    "max_lat", NEQ, 0,
-                    AND,
-                    "max_lon", NEQ, 0));
-
-        double min_lat, min_lon, max_lat, max_lon;
-
-        try {
-            auto range_q_ret = range_q.run();
-
-            min_lat = sqlite3_column_as<double>(*range_q_ret, 0);
-            min_lon = sqlite3_column_as<double>(*range_q_ret, 1);
-            max_lat = sqlite3_column_as<double>(*range_q_ret, 2);
-            max_lon = sqlite3_column_as<double>(*range_q_ret, 3);
-
-        } catch (const std::exception& e) {
-            min_lat = 0;
-            max_lat = 0;
-            min_lon = 0;
-            max_lon = 0;
-        }
-
-        if (min_lat == 0 || min_lon == 0 || max_lat == 0 || max_lon == 0) {
-            if (!outputjson)
-                fmt::print("  Location data: None\n");
-        } else {
-            auto diag_distance = distance_meters(min_lat, min_lon, max_lat, max_lon) / 1000.0f;
-            if (outputjson) {
-                root["min_lat"] = min_lat;
-                root["min_lon"] = min_lon;
-                root["max_lat"] = max_lat;
-                root["max_lon"] = max_lon;
-                root["diag_distance_km"] = diag_distance;
-            } else {
-                fmt::print("  Bounding location: {:3.10f},{:3.10f} {:3.10f},{:3.10f} (~{:f} Km)\n",
-                        min_lat, min_lon, max_lat, max_lon, diag_distance);
-            }
-        }
-
-        if (!outputjson) {
-            fmt::print("  Packets with location: {}\n", n_packets_with_loc);
-            fmt::print("  Data with location: {}\n", n_data_with_loc);
-            fmt::print("\n");
+        fmt::print("  Packets: {}\n", n_total_packets_db);
+        fmt::print("  Non-packet data: {}\n", n_total_data_db);
+        fmt::print("  Packets with location: {}\n", n_packets_with_loc);
+        fmt::print("  Data with location: {}\n", n_data_with_loc);
+        fmt::print("\n");
+       
+        unsigned long n_total_devices;
+        auto ndevices_q = _SELECT(db, "devices", {"count(*)"});
+        auto ndevices_ret = ndevices_q.begin();
+        if (ndevices_ret == ndevices_q.end()) {
+            fmt::print(stderr, "ERROR:  Unable to fetch device count.\n");
+            sqlite3_close(db);
+            exit(1);
         }
+        n_total_devices = sqlite3_column_as<unsigned long>(*ndevices_ret, 0);
 
+        fmt::print("  Devices: {}\n", n_total_devices);
 
     } catch (const std::exception& e) {
         fmt::print(stderr, "ERROR:  Could not get database information from '{}': {}\n", in_fname, e.what());
         exit(0);
     }
 
-    if (outputjson)
-        fmt::print("{}\n", root);
-
     return 0;
 }
 
+
